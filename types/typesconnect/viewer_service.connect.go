// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: viewer_service.proto

package typesconnect

import (
	context "context"
	errors "errors"
	types "github.com/aergoio/aergo/types"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ViewerServiceName is the fully-qualified name of the ViewerService service.
	ViewerServiceName = "service.ViewerService"
)

// ViewerServiceClient is a client for the service.ViewerService service.
type ViewerServiceClient interface {
	// server status
	GetServerInfo(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.ChainInfo], error)
	GetMempoolInfo(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.SingleBytes], error)
	// block
	GetBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Block], error)
	GetBlockByNum(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Block], error)
	GetBlockMetadata(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.BlockMetadata], error)
	GetBlockList(context.Context, *connect_go.Request[types.ListParams]) (*connect_go.Response[types.BlockHeaderList], error)
	// tx
	GetTx(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Tx], error)
	GetTxInBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.TxInBlock], error)
	GetReceipt(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Receipt], error)
	// event
	GetEventList(context.Context, *connect_go.Request[types.FilterInfo]) (*connect_go.Response[types.EventList], error)
	// contract
	QueryContract(context.Context, *connect_go.Request[types.Query]) (*connect_go.Response[types.SingleBytes], error)
	QueryContractState(context.Context, *connect_go.Request[types.StateQuery]) (*connect_go.Response[types.StateQueryProof], error)
	GetABI(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.ABI], error)
	// account
	GetAccountState(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.State], error)
	GetAccountStateAndProof(context.Context, *connect_go.Request[types.AccountAndRoot]) (*connect_go.Response[types.AccountProof], error)
	GetName(context.Context, *connect_go.Request[types.Name]) (*connect_go.Response[types.NameInfo], error)
}

// NewViewerServiceClient constructs a client for the service.ViewerService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewViewerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ViewerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &viewerServiceClient{
		getServerInfo: connect_go.NewClient[types.Empty, types.ChainInfo](
			httpClient,
			baseURL+"/service.ViewerService/GetServerInfo",
			opts...,
		),
		getMempoolInfo: connect_go.NewClient[types.Empty, types.SingleBytes](
			httpClient,
			baseURL+"/service.ViewerService/GetMempoolInfo",
			opts...,
		),
		getBlock: connect_go.NewClient[types.SingleBytes, types.Block](
			httpClient,
			baseURL+"/service.ViewerService/GetBlock",
			opts...,
		),
		getBlockByNum: connect_go.NewClient[types.SingleBytes, types.Block](
			httpClient,
			baseURL+"/service.ViewerService/GetBlockByNum",
			opts...,
		),
		getBlockMetadata: connect_go.NewClient[types.SingleBytes, types.BlockMetadata](
			httpClient,
			baseURL+"/service.ViewerService/GetBlockMetadata",
			opts...,
		),
		getBlockList: connect_go.NewClient[types.ListParams, types.BlockHeaderList](
			httpClient,
			baseURL+"/service.ViewerService/GetBlockList",
			opts...,
		),
		getTx: connect_go.NewClient[types.SingleBytes, types.Tx](
			httpClient,
			baseURL+"/service.ViewerService/GetTx",
			opts...,
		),
		getTxInBlock: connect_go.NewClient[types.SingleBytes, types.TxInBlock](
			httpClient,
			baseURL+"/service.ViewerService/GetTxInBlock",
			opts...,
		),
		getReceipt: connect_go.NewClient[types.SingleBytes, types.Receipt](
			httpClient,
			baseURL+"/service.ViewerService/GetReceipt",
			opts...,
		),
		getEventList: connect_go.NewClient[types.FilterInfo, types.EventList](
			httpClient,
			baseURL+"/service.ViewerService/GetEventList",
			opts...,
		),
		queryContract: connect_go.NewClient[types.Query, types.SingleBytes](
			httpClient,
			baseURL+"/service.ViewerService/QueryContract",
			opts...,
		),
		queryContractState: connect_go.NewClient[types.StateQuery, types.StateQueryProof](
			httpClient,
			baseURL+"/service.ViewerService/QueryContractState",
			opts...,
		),
		getABI: connect_go.NewClient[types.SingleBytes, types.ABI](
			httpClient,
			baseURL+"/service.ViewerService/GetABI",
			opts...,
		),
		getAccountState: connect_go.NewClient[types.SingleBytes, types.State](
			httpClient,
			baseURL+"/service.ViewerService/GetAccountState",
			opts...,
		),
		getAccountStateAndProof: connect_go.NewClient[types.AccountAndRoot, types.AccountProof](
			httpClient,
			baseURL+"/service.ViewerService/GetAccountStateAndProof",
			opts...,
		),
		getName: connect_go.NewClient[types.Name, types.NameInfo](
			httpClient,
			baseURL+"/service.ViewerService/GetName",
			opts...,
		),
	}
}

// viewerServiceClient implements ViewerServiceClient.
type viewerServiceClient struct {
	getServerInfo           *connect_go.Client[types.Empty, types.ChainInfo]
	getMempoolInfo          *connect_go.Client[types.Empty, types.SingleBytes]
	getBlock                *connect_go.Client[types.SingleBytes, types.Block]
	getBlockByNum           *connect_go.Client[types.SingleBytes, types.Block]
	getBlockMetadata        *connect_go.Client[types.SingleBytes, types.BlockMetadata]
	getBlockList            *connect_go.Client[types.ListParams, types.BlockHeaderList]
	getTx                   *connect_go.Client[types.SingleBytes, types.Tx]
	getTxInBlock            *connect_go.Client[types.SingleBytes, types.TxInBlock]
	getReceipt              *connect_go.Client[types.SingleBytes, types.Receipt]
	getEventList            *connect_go.Client[types.FilterInfo, types.EventList]
	queryContract           *connect_go.Client[types.Query, types.SingleBytes]
	queryContractState      *connect_go.Client[types.StateQuery, types.StateQueryProof]
	getABI                  *connect_go.Client[types.SingleBytes, types.ABI]
	getAccountState         *connect_go.Client[types.SingleBytes, types.State]
	getAccountStateAndProof *connect_go.Client[types.AccountAndRoot, types.AccountProof]
	getName                 *connect_go.Client[types.Name, types.NameInfo]
}

// GetServerInfo calls service.ViewerService.GetServerInfo.
func (c *viewerServiceClient) GetServerInfo(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.ChainInfo], error) {
	return c.getServerInfo.CallUnary(ctx, req)
}

// GetMempoolInfo calls service.ViewerService.GetMempoolInfo.
func (c *viewerServiceClient) GetMempoolInfo(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.SingleBytes], error) {
	return c.getMempoolInfo.CallUnary(ctx, req)
}

// GetBlock calls service.ViewerService.GetBlock.
func (c *viewerServiceClient) GetBlock(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Block], error) {
	return c.getBlock.CallUnary(ctx, req)
}

// GetBlockByNum calls service.ViewerService.GetBlockByNum.
func (c *viewerServiceClient) GetBlockByNum(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Block], error) {
	return c.getBlockByNum.CallUnary(ctx, req)
}

// GetBlockMetadata calls service.ViewerService.GetBlockMetadata.
func (c *viewerServiceClient) GetBlockMetadata(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.BlockMetadata], error) {
	return c.getBlockMetadata.CallUnary(ctx, req)
}

// GetBlockList calls service.ViewerService.GetBlockList.
func (c *viewerServiceClient) GetBlockList(ctx context.Context, req *connect_go.Request[types.ListParams]) (*connect_go.Response[types.BlockHeaderList], error) {
	return c.getBlockList.CallUnary(ctx, req)
}

// GetTx calls service.ViewerService.GetTx.
func (c *viewerServiceClient) GetTx(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Tx], error) {
	return c.getTx.CallUnary(ctx, req)
}

// GetTxInBlock calls service.ViewerService.GetTxInBlock.
func (c *viewerServiceClient) GetTxInBlock(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.TxInBlock], error) {
	return c.getTxInBlock.CallUnary(ctx, req)
}

// GetReceipt calls service.ViewerService.GetReceipt.
func (c *viewerServiceClient) GetReceipt(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Receipt], error) {
	return c.getReceipt.CallUnary(ctx, req)
}

// GetEventList calls service.ViewerService.GetEventList.
func (c *viewerServiceClient) GetEventList(ctx context.Context, req *connect_go.Request[types.FilterInfo]) (*connect_go.Response[types.EventList], error) {
	return c.getEventList.CallUnary(ctx, req)
}

// QueryContract calls service.ViewerService.QueryContract.
func (c *viewerServiceClient) QueryContract(ctx context.Context, req *connect_go.Request[types.Query]) (*connect_go.Response[types.SingleBytes], error) {
	return c.queryContract.CallUnary(ctx, req)
}

// QueryContractState calls service.ViewerService.QueryContractState.
func (c *viewerServiceClient) QueryContractState(ctx context.Context, req *connect_go.Request[types.StateQuery]) (*connect_go.Response[types.StateQueryProof], error) {
	return c.queryContractState.CallUnary(ctx, req)
}

// GetABI calls service.ViewerService.GetABI.
func (c *viewerServiceClient) GetABI(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.ABI], error) {
	return c.getABI.CallUnary(ctx, req)
}

// GetAccountState calls service.ViewerService.GetAccountState.
func (c *viewerServiceClient) GetAccountState(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.State], error) {
	return c.getAccountState.CallUnary(ctx, req)
}

// GetAccountStateAndProof calls service.ViewerService.GetAccountStateAndProof.
func (c *viewerServiceClient) GetAccountStateAndProof(ctx context.Context, req *connect_go.Request[types.AccountAndRoot]) (*connect_go.Response[types.AccountProof], error) {
	return c.getAccountStateAndProof.CallUnary(ctx, req)
}

// GetName calls service.ViewerService.GetName.
func (c *viewerServiceClient) GetName(ctx context.Context, req *connect_go.Request[types.Name]) (*connect_go.Response[types.NameInfo], error) {
	return c.getName.CallUnary(ctx, req)
}

// ViewerServiceHandler is an implementation of the service.ViewerService service.
type ViewerServiceHandler interface {
	// server status
	GetServerInfo(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.ChainInfo], error)
	GetMempoolInfo(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.SingleBytes], error)
	// block
	GetBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Block], error)
	GetBlockByNum(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Block], error)
	GetBlockMetadata(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.BlockMetadata], error)
	GetBlockList(context.Context, *connect_go.Request[types.ListParams]) (*connect_go.Response[types.BlockHeaderList], error)
	// tx
	GetTx(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Tx], error)
	GetTxInBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.TxInBlock], error)
	GetReceipt(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Receipt], error)
	// event
	GetEventList(context.Context, *connect_go.Request[types.FilterInfo]) (*connect_go.Response[types.EventList], error)
	// contract
	QueryContract(context.Context, *connect_go.Request[types.Query]) (*connect_go.Response[types.SingleBytes], error)
	QueryContractState(context.Context, *connect_go.Request[types.StateQuery]) (*connect_go.Response[types.StateQueryProof], error)
	GetABI(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.ABI], error)
	// account
	GetAccountState(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.State], error)
	GetAccountStateAndProof(context.Context, *connect_go.Request[types.AccountAndRoot]) (*connect_go.Response[types.AccountProof], error)
	GetName(context.Context, *connect_go.Request[types.Name]) (*connect_go.Response[types.NameInfo], error)
}

// NewViewerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewViewerServiceHandler(svc ViewerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/service.ViewerService/GetServerInfo", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetServerInfo",
		svc.GetServerInfo,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetMempoolInfo", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetMempoolInfo",
		svc.GetMempoolInfo,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetBlock", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetBlock",
		svc.GetBlock,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetBlockByNum", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetBlockByNum",
		svc.GetBlockByNum,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetBlockMetadata", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetBlockMetadata",
		svc.GetBlockMetadata,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetBlockList", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetBlockList",
		svc.GetBlockList,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetTx", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetTx",
		svc.GetTx,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetTxInBlock", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetTxInBlock",
		svc.GetTxInBlock,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetReceipt", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetReceipt",
		svc.GetReceipt,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetEventList", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetEventList",
		svc.GetEventList,
		opts...,
	))
	mux.Handle("/service.ViewerService/QueryContract", connect_go.NewUnaryHandler(
		"/service.ViewerService/QueryContract",
		svc.QueryContract,
		opts...,
	))
	mux.Handle("/service.ViewerService/QueryContractState", connect_go.NewUnaryHandler(
		"/service.ViewerService/QueryContractState",
		svc.QueryContractState,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetABI", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetABI",
		svc.GetABI,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetAccountState", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetAccountState",
		svc.GetAccountState,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetAccountStateAndProof", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetAccountStateAndProof",
		svc.GetAccountStateAndProof,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetName", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetName",
		svc.GetName,
		opts...,
	))
	return "/service.ViewerService/", mux
}

// UnimplementedViewerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedViewerServiceHandler struct{}

func (UnimplementedViewerServiceHandler) GetServerInfo(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.ChainInfo], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetServerInfo is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetMempoolInfo(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.SingleBytes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetMempoolInfo is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Block], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetBlock is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetBlockByNum(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Block], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetBlockByNum is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetBlockMetadata(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.BlockMetadata], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetBlockMetadata is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetBlockList(context.Context, *connect_go.Request[types.ListParams]) (*connect_go.Response[types.BlockHeaderList], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetBlockList is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetTx(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Tx], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetTx is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetTxInBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.TxInBlock], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetTxInBlock is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetReceipt(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Receipt], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetReceipt is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetEventList(context.Context, *connect_go.Request[types.FilterInfo]) (*connect_go.Response[types.EventList], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetEventList is not implemented"))
}

func (UnimplementedViewerServiceHandler) QueryContract(context.Context, *connect_go.Request[types.Query]) (*connect_go.Response[types.SingleBytes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.QueryContract is not implemented"))
}

func (UnimplementedViewerServiceHandler) QueryContractState(context.Context, *connect_go.Request[types.StateQuery]) (*connect_go.Response[types.StateQueryProof], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.QueryContractState is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetABI(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.ABI], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetABI is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetAccountState(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.State], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetAccountState is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetAccountStateAndProof(context.Context, *connect_go.Request[types.AccountAndRoot]) (*connect_go.Response[types.AccountProof], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetAccountStateAndProof is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetName(context.Context, *connect_go.Request[types.Name]) (*connect_go.Response[types.NameInfo], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetName is not implemented"))
}
