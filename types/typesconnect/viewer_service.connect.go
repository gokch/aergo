// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: viewer_service.proto

package typesconnect

import (
	context "context"
	errors "errors"
	types "github.com/aergoio/aergo/types"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ViewerServiceName is the fully-qualified name of the ViewerService service.
	ViewerServiceName = "service.ViewerService"
)

// ViewerServiceClient is a client for the service.ViewerService service.
type ViewerServiceClient interface {
	// server status
	Ping(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.SingleBytes], error)
	GetChainInfo(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.ChainInfo], error)
	GetNodeState(context.Context, *connect_go.Request[types.NodeReq]) (*connect_go.Response[types.SingleBytes], error)
	GetMetric(context.Context, *connect_go.Request[types.MetricsRequest]) (*connect_go.Response[types.Metrics], error)
	GetBestBlock(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Block], error)
	// block
	GetBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Block], error)
	GetBlockMetadata(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.BlockMetadata], error)
	GetBlockList(context.Context, *connect_go.Request[types.ListParams]) (*connect_go.Response[types.BlockHeaderList], error)
	// tx
	GetTx(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Tx], error)
	GetTxInBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.TxInBlock], error)
	// receipt
	GetReceipt(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Receipt], error)
	GetReceiptInBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Receipt], error)
	// event
	GetEvent(context.Context, *connect_go.Request[types.FilterInfo]) (*connect_go.Response[types.Event], error)
	GetEventList(context.Context, *connect_go.Request[types.FilterInfo]) (*connect_go.Response[types.EventList], error)
	// contract
	QueryContract(context.Context, *connect_go.Request[types.Query]) (*connect_go.Response[types.SingleBytes], error)
	GetABI(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.ABI], error)
	// account
	GetAccountState(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.State], error)
	GetNameInfo(context.Context, *connect_go.Request[types.Name]) (*connect_go.Response[types.NameInfo], error)
}

// NewViewerServiceClient constructs a client for the service.ViewerService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewViewerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ViewerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &viewerServiceClient{
		ping: connect_go.NewClient[types.Empty, types.SingleBytes](
			httpClient,
			baseURL+"/service.ViewerService/Ping",
			opts...,
		),
		getChainInfo: connect_go.NewClient[types.Empty, types.ChainInfo](
			httpClient,
			baseURL+"/service.ViewerService/GetChainInfo",
			opts...,
		),
		getNodeState: connect_go.NewClient[types.NodeReq, types.SingleBytes](
			httpClient,
			baseURL+"/service.ViewerService/GetNodeState",
			opts...,
		),
		getMetric: connect_go.NewClient[types.MetricsRequest, types.Metrics](
			httpClient,
			baseURL+"/service.ViewerService/GetMetric",
			opts...,
		),
		getBestBlock: connect_go.NewClient[types.Empty, types.Block](
			httpClient,
			baseURL+"/service.ViewerService/GetBestBlock",
			opts...,
		),
		getBlock: connect_go.NewClient[types.SingleBytes, types.Block](
			httpClient,
			baseURL+"/service.ViewerService/GetBlock",
			opts...,
		),
		getBlockMetadata: connect_go.NewClient[types.SingleBytes, types.BlockMetadata](
			httpClient,
			baseURL+"/service.ViewerService/GetBlockMetadata",
			opts...,
		),
		getBlockList: connect_go.NewClient[types.ListParams, types.BlockHeaderList](
			httpClient,
			baseURL+"/service.ViewerService/GetBlockList",
			opts...,
		),
		getTx: connect_go.NewClient[types.SingleBytes, types.Tx](
			httpClient,
			baseURL+"/service.ViewerService/GetTx",
			opts...,
		),
		getTxInBlock: connect_go.NewClient[types.SingleBytes, types.TxInBlock](
			httpClient,
			baseURL+"/service.ViewerService/GetTxInBlock",
			opts...,
		),
		getReceipt: connect_go.NewClient[types.SingleBytes, types.Receipt](
			httpClient,
			baseURL+"/service.ViewerService/GetReceipt",
			opts...,
		),
		getReceiptInBlock: connect_go.NewClient[types.SingleBytes, types.Receipt](
			httpClient,
			baseURL+"/service.ViewerService/GetReceiptInBlock",
			opts...,
		),
		getEvent: connect_go.NewClient[types.FilterInfo, types.Event](
			httpClient,
			baseURL+"/service.ViewerService/GetEvent",
			opts...,
		),
		getEventList: connect_go.NewClient[types.FilterInfo, types.EventList](
			httpClient,
			baseURL+"/service.ViewerService/GetEventList",
			opts...,
		),
		queryContract: connect_go.NewClient[types.Query, types.SingleBytes](
			httpClient,
			baseURL+"/service.ViewerService/QueryContract",
			opts...,
		),
		getABI: connect_go.NewClient[types.SingleBytes, types.ABI](
			httpClient,
			baseURL+"/service.ViewerService/GetABI",
			opts...,
		),
		getAccountState: connect_go.NewClient[types.SingleBytes, types.State](
			httpClient,
			baseURL+"/service.ViewerService/GetAccountState",
			opts...,
		),
		getNameInfo: connect_go.NewClient[types.Name, types.NameInfo](
			httpClient,
			baseURL+"/service.ViewerService/GetNameInfo",
			opts...,
		),
	}
}

// viewerServiceClient implements ViewerServiceClient.
type viewerServiceClient struct {
	ping              *connect_go.Client[types.Empty, types.SingleBytes]
	getChainInfo      *connect_go.Client[types.Empty, types.ChainInfo]
	getNodeState      *connect_go.Client[types.NodeReq, types.SingleBytes]
	getMetric         *connect_go.Client[types.MetricsRequest, types.Metrics]
	getBestBlock      *connect_go.Client[types.Empty, types.Block]
	getBlock          *connect_go.Client[types.SingleBytes, types.Block]
	getBlockMetadata  *connect_go.Client[types.SingleBytes, types.BlockMetadata]
	getBlockList      *connect_go.Client[types.ListParams, types.BlockHeaderList]
	getTx             *connect_go.Client[types.SingleBytes, types.Tx]
	getTxInBlock      *connect_go.Client[types.SingleBytes, types.TxInBlock]
	getReceipt        *connect_go.Client[types.SingleBytes, types.Receipt]
	getReceiptInBlock *connect_go.Client[types.SingleBytes, types.Receipt]
	getEvent          *connect_go.Client[types.FilterInfo, types.Event]
	getEventList      *connect_go.Client[types.FilterInfo, types.EventList]
	queryContract     *connect_go.Client[types.Query, types.SingleBytes]
	getABI            *connect_go.Client[types.SingleBytes, types.ABI]
	getAccountState   *connect_go.Client[types.SingleBytes, types.State]
	getNameInfo       *connect_go.Client[types.Name, types.NameInfo]
}

// Ping calls service.ViewerService.Ping.
func (c *viewerServiceClient) Ping(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.SingleBytes], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetChainInfo calls service.ViewerService.GetChainInfo.
func (c *viewerServiceClient) GetChainInfo(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.ChainInfo], error) {
	return c.getChainInfo.CallUnary(ctx, req)
}

// GetNodeState calls service.ViewerService.GetNodeState.
func (c *viewerServiceClient) GetNodeState(ctx context.Context, req *connect_go.Request[types.NodeReq]) (*connect_go.Response[types.SingleBytes], error) {
	return c.getNodeState.CallUnary(ctx, req)
}

// GetMetric calls service.ViewerService.GetMetric.
func (c *viewerServiceClient) GetMetric(ctx context.Context, req *connect_go.Request[types.MetricsRequest]) (*connect_go.Response[types.Metrics], error) {
	return c.getMetric.CallUnary(ctx, req)
}

// GetBestBlock calls service.ViewerService.GetBestBlock.
func (c *viewerServiceClient) GetBestBlock(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Block], error) {
	return c.getBestBlock.CallUnary(ctx, req)
}

// GetBlock calls service.ViewerService.GetBlock.
func (c *viewerServiceClient) GetBlock(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Block], error) {
	return c.getBlock.CallUnary(ctx, req)
}

// GetBlockMetadata calls service.ViewerService.GetBlockMetadata.
func (c *viewerServiceClient) GetBlockMetadata(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.BlockMetadata], error) {
	return c.getBlockMetadata.CallUnary(ctx, req)
}

// GetBlockList calls service.ViewerService.GetBlockList.
func (c *viewerServiceClient) GetBlockList(ctx context.Context, req *connect_go.Request[types.ListParams]) (*connect_go.Response[types.BlockHeaderList], error) {
	return c.getBlockList.CallUnary(ctx, req)
}

// GetTx calls service.ViewerService.GetTx.
func (c *viewerServiceClient) GetTx(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Tx], error) {
	return c.getTx.CallUnary(ctx, req)
}

// GetTxInBlock calls service.ViewerService.GetTxInBlock.
func (c *viewerServiceClient) GetTxInBlock(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.TxInBlock], error) {
	return c.getTxInBlock.CallUnary(ctx, req)
}

// GetReceipt calls service.ViewerService.GetReceipt.
func (c *viewerServiceClient) GetReceipt(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Receipt], error) {
	return c.getReceipt.CallUnary(ctx, req)
}

// GetReceiptInBlock calls service.ViewerService.GetReceiptInBlock.
func (c *viewerServiceClient) GetReceiptInBlock(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Receipt], error) {
	return c.getReceiptInBlock.CallUnary(ctx, req)
}

// GetEvent calls service.ViewerService.GetEvent.
func (c *viewerServiceClient) GetEvent(ctx context.Context, req *connect_go.Request[types.FilterInfo]) (*connect_go.Response[types.Event], error) {
	return c.getEvent.CallUnary(ctx, req)
}

// GetEventList calls service.ViewerService.GetEventList.
func (c *viewerServiceClient) GetEventList(ctx context.Context, req *connect_go.Request[types.FilterInfo]) (*connect_go.Response[types.EventList], error) {
	return c.getEventList.CallUnary(ctx, req)
}

// QueryContract calls service.ViewerService.QueryContract.
func (c *viewerServiceClient) QueryContract(ctx context.Context, req *connect_go.Request[types.Query]) (*connect_go.Response[types.SingleBytes], error) {
	return c.queryContract.CallUnary(ctx, req)
}

// GetABI calls service.ViewerService.GetABI.
func (c *viewerServiceClient) GetABI(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.ABI], error) {
	return c.getABI.CallUnary(ctx, req)
}

// GetAccountState calls service.ViewerService.GetAccountState.
func (c *viewerServiceClient) GetAccountState(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.State], error) {
	return c.getAccountState.CallUnary(ctx, req)
}

// GetNameInfo calls service.ViewerService.GetNameInfo.
func (c *viewerServiceClient) GetNameInfo(ctx context.Context, req *connect_go.Request[types.Name]) (*connect_go.Response[types.NameInfo], error) {
	return c.getNameInfo.CallUnary(ctx, req)
}

// ViewerServiceHandler is an implementation of the service.ViewerService service.
type ViewerServiceHandler interface {
	// server status
	Ping(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.SingleBytes], error)
	GetChainInfo(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.ChainInfo], error)
	GetNodeState(context.Context, *connect_go.Request[types.NodeReq]) (*connect_go.Response[types.SingleBytes], error)
	GetMetric(context.Context, *connect_go.Request[types.MetricsRequest]) (*connect_go.Response[types.Metrics], error)
	GetBestBlock(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Block], error)
	// block
	GetBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Block], error)
	GetBlockMetadata(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.BlockMetadata], error)
	GetBlockList(context.Context, *connect_go.Request[types.ListParams]) (*connect_go.Response[types.BlockHeaderList], error)
	// tx
	GetTx(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Tx], error)
	GetTxInBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.TxInBlock], error)
	// receipt
	GetReceipt(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Receipt], error)
	GetReceiptInBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Receipt], error)
	// event
	GetEvent(context.Context, *connect_go.Request[types.FilterInfo]) (*connect_go.Response[types.Event], error)
	GetEventList(context.Context, *connect_go.Request[types.FilterInfo]) (*connect_go.Response[types.EventList], error)
	// contract
	QueryContract(context.Context, *connect_go.Request[types.Query]) (*connect_go.Response[types.SingleBytes], error)
	GetABI(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.ABI], error)
	// account
	GetAccountState(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.State], error)
	GetNameInfo(context.Context, *connect_go.Request[types.Name]) (*connect_go.Response[types.NameInfo], error)
}

// NewViewerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewViewerServiceHandler(svc ViewerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/service.ViewerService/Ping", connect_go.NewUnaryHandler(
		"/service.ViewerService/Ping",
		svc.Ping,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetChainInfo", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetChainInfo",
		svc.GetChainInfo,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetNodeState", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetNodeState",
		svc.GetNodeState,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetMetric", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetMetric",
		svc.GetMetric,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetBestBlock", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetBestBlock",
		svc.GetBestBlock,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetBlock", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetBlock",
		svc.GetBlock,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetBlockMetadata", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetBlockMetadata",
		svc.GetBlockMetadata,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetBlockList", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetBlockList",
		svc.GetBlockList,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetTx", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetTx",
		svc.GetTx,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetTxInBlock", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetTxInBlock",
		svc.GetTxInBlock,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetReceipt", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetReceipt",
		svc.GetReceipt,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetReceiptInBlock", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetReceiptInBlock",
		svc.GetReceiptInBlock,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetEvent", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetEvent",
		svc.GetEvent,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetEventList", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetEventList",
		svc.GetEventList,
		opts...,
	))
	mux.Handle("/service.ViewerService/QueryContract", connect_go.NewUnaryHandler(
		"/service.ViewerService/QueryContract",
		svc.QueryContract,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetABI", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetABI",
		svc.GetABI,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetAccountState", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetAccountState",
		svc.GetAccountState,
		opts...,
	))
	mux.Handle("/service.ViewerService/GetNameInfo", connect_go.NewUnaryHandler(
		"/service.ViewerService/GetNameInfo",
		svc.GetNameInfo,
		opts...,
	))
	return "/service.ViewerService/", mux
}

// UnimplementedViewerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedViewerServiceHandler struct{}

func (UnimplementedViewerServiceHandler) Ping(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.SingleBytes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.Ping is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetChainInfo(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.ChainInfo], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetChainInfo is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetNodeState(context.Context, *connect_go.Request[types.NodeReq]) (*connect_go.Response[types.SingleBytes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetNodeState is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetMetric(context.Context, *connect_go.Request[types.MetricsRequest]) (*connect_go.Response[types.Metrics], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetMetric is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetBestBlock(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Block], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetBestBlock is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Block], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetBlock is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetBlockMetadata(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.BlockMetadata], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetBlockMetadata is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetBlockList(context.Context, *connect_go.Request[types.ListParams]) (*connect_go.Response[types.BlockHeaderList], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetBlockList is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetTx(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Tx], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetTx is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetTxInBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.TxInBlock], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetTxInBlock is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetReceipt(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Receipt], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetReceipt is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetReceiptInBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Receipt], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetReceiptInBlock is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetEvent(context.Context, *connect_go.Request[types.FilterInfo]) (*connect_go.Response[types.Event], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetEvent is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetEventList(context.Context, *connect_go.Request[types.FilterInfo]) (*connect_go.Response[types.EventList], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetEventList is not implemented"))
}

func (UnimplementedViewerServiceHandler) QueryContract(context.Context, *connect_go.Request[types.Query]) (*connect_go.Response[types.SingleBytes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.QueryContract is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetABI(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.ABI], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetABI is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetAccountState(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.State], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetAccountState is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetNameInfo(context.Context, *connect_go.Request[types.Name]) (*connect_go.Response[types.NameInfo], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("service.ViewerService.GetNameInfo is not implemented"))
}
