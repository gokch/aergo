// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wallet_service.proto

package typesconnect

import (
	context "context"
	errors "errors"
	types "github.com/aergoio/aergo/types"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WalletServiceName is the fully-qualified name of the WalletService service.
	WalletServiceName = "api.WalletService"
)

// WalletServiceClient is a client for the api.WalletService service.
type WalletServiceClient interface {
	Import(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	Export(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
}

// NewWalletServiceClient constructs a client for the api.WalletService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWalletServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WalletServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &walletServiceClient{
		_import: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/api.WalletService/Import",
			opts...,
		),
		export: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/api.WalletService/Export",
			opts...,
		),
	}
}

// walletServiceClient implements WalletServiceClient.
type walletServiceClient struct {
	_import *connect_go.Client[types.Empty, types.Empty]
	export  *connect_go.Client[types.Empty, types.Empty]
}

// Import calls api.WalletService.Import.
func (c *walletServiceClient) Import(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c._import.CallUnary(ctx, req)
}

// Export calls api.WalletService.Export.
func (c *walletServiceClient) Export(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c.export.CallUnary(ctx, req)
}

// WalletServiceHandler is an implementation of the api.WalletService service.
type WalletServiceHandler interface {
	Import(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	Export(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
}

// NewWalletServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWalletServiceHandler(svc WalletServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/api.WalletService/Import", connect_go.NewUnaryHandler(
		"/api.WalletService/Import",
		svc.Import,
		opts...,
	))
	mux.Handle("/api.WalletService/Export", connect_go.NewUnaryHandler(
		"/api.WalletService/Export",
		svc.Export,
		opts...,
	))
	return "/api.WalletService/", mux
}

// UnimplementedWalletServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWalletServiceHandler struct{}

func (UnimplementedWalletServiceHandler) Import(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.WalletService.Import is not implemented"))
}

func (UnimplementedWalletServiceHandler) Export(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.WalletService.Export is not implemented"))
}
