// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: viewer_service.proto

package typesconnect

import (
	context "context"
	errors "errors"
	types "github.com/aergoio/aergo/types"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ViewerServiceName is the fully-qualified name of the ViewerService service.
	ViewerServiceName = "api.ViewerService"
)

// ViewerServiceClient is a client for the api.ViewerService service.
type ViewerServiceClient interface {
	// server status
	Ping(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	GetChainInfo(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.ChainInfo], error)
	GetNodeState(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	GetMetric(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	GetBestBlock(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	// block
	GetBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Block], error)
	GetBlockList(context.Context, *connect_go.Request[types.ListParams]) (*connect_go.Response[types.BlockHeaderList], error)
	GetBlockStream(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	// tx
	GetTx(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Tx], error)
	GetTxInBlock(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.TxInBlock], error)
	// receipt
	GetReceipt(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Receipt], error)
	GetReceiptInBlock(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	// event
	GetEventList(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.EventList], error)
	GetEventStream(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	// contract
	GetContract(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	QueryContract(context.Context, *connect_go.Request[types.Query]) (*connect_go.Response[types.SingleBytes], error)
	// account
	GetAccount(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Account], error)
	GetName(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	// token
	GetToken(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	// nft
	GetNFT(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
}

// NewViewerServiceClient constructs a client for the api.ViewerService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewViewerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ViewerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &viewerServiceClient{
		ping: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/api.ViewerService/Ping",
			opts...,
		),
		getChainInfo: connect_go.NewClient[types.Empty, types.ChainInfo](
			httpClient,
			baseURL+"/api.ViewerService/GetChainInfo",
			opts...,
		),
		getNodeState: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/api.ViewerService/GetNodeState",
			opts...,
		),
		getMetric: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/api.ViewerService/GetMetric",
			opts...,
		),
		getBestBlock: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/api.ViewerService/GetBestBlock",
			opts...,
		),
		getBlock: connect_go.NewClient[types.SingleBytes, types.Block](
			httpClient,
			baseURL+"/api.ViewerService/GetBlock",
			opts...,
		),
		getBlockList: connect_go.NewClient[types.ListParams, types.BlockHeaderList](
			httpClient,
			baseURL+"/api.ViewerService/GetBlockList",
			opts...,
		),
		getBlockStream: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/api.ViewerService/GetBlockStream",
			opts...,
		),
		getTx: connect_go.NewClient[types.Empty, types.Tx](
			httpClient,
			baseURL+"/api.ViewerService/GetTx",
			opts...,
		),
		getTxInBlock: connect_go.NewClient[types.Empty, types.TxInBlock](
			httpClient,
			baseURL+"/api.ViewerService/GetTxInBlock",
			opts...,
		),
		getReceipt: connect_go.NewClient[types.Empty, types.Receipt](
			httpClient,
			baseURL+"/api.ViewerService/GetReceipt",
			opts...,
		),
		getReceiptInBlock: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/api.ViewerService/GetReceiptInBlock",
			opts...,
		),
		getEventList: connect_go.NewClient[types.Empty, types.EventList](
			httpClient,
			baseURL+"/api.ViewerService/GetEventList",
			opts...,
		),
		getEventStream: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/api.ViewerService/GetEventStream",
			opts...,
		),
		getContract: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/api.ViewerService/GetContract",
			opts...,
		),
		queryContract: connect_go.NewClient[types.Query, types.SingleBytes](
			httpClient,
			baseURL+"/api.ViewerService/QueryContract",
			opts...,
		),
		getAccount: connect_go.NewClient[types.Empty, types.Account](
			httpClient,
			baseURL+"/api.ViewerService/GetAccount",
			opts...,
		),
		getName: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/api.ViewerService/GetName",
			opts...,
		),
		getToken: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/api.ViewerService/GetToken",
			opts...,
		),
		getNFT: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/api.ViewerService/GetNFT",
			opts...,
		),
	}
}

// viewerServiceClient implements ViewerServiceClient.
type viewerServiceClient struct {
	ping              *connect_go.Client[types.Empty, types.Empty]
	getChainInfo      *connect_go.Client[types.Empty, types.ChainInfo]
	getNodeState      *connect_go.Client[types.Empty, types.Empty]
	getMetric         *connect_go.Client[types.Empty, types.Empty]
	getBestBlock      *connect_go.Client[types.Empty, types.Empty]
	getBlock          *connect_go.Client[types.SingleBytes, types.Block]
	getBlockList      *connect_go.Client[types.ListParams, types.BlockHeaderList]
	getBlockStream    *connect_go.Client[types.Empty, types.Empty]
	getTx             *connect_go.Client[types.Empty, types.Tx]
	getTxInBlock      *connect_go.Client[types.Empty, types.TxInBlock]
	getReceipt        *connect_go.Client[types.Empty, types.Receipt]
	getReceiptInBlock *connect_go.Client[types.Empty, types.Empty]
	getEventList      *connect_go.Client[types.Empty, types.EventList]
	getEventStream    *connect_go.Client[types.Empty, types.Empty]
	getContract       *connect_go.Client[types.Empty, types.Empty]
	queryContract     *connect_go.Client[types.Query, types.SingleBytes]
	getAccount        *connect_go.Client[types.Empty, types.Account]
	getName           *connect_go.Client[types.Empty, types.Empty]
	getToken          *connect_go.Client[types.Empty, types.Empty]
	getNFT            *connect_go.Client[types.Empty, types.Empty]
}

// Ping calls api.ViewerService.Ping.
func (c *viewerServiceClient) Ping(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetChainInfo calls api.ViewerService.GetChainInfo.
func (c *viewerServiceClient) GetChainInfo(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.ChainInfo], error) {
	return c.getChainInfo.CallUnary(ctx, req)
}

// GetNodeState calls api.ViewerService.GetNodeState.
func (c *viewerServiceClient) GetNodeState(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c.getNodeState.CallUnary(ctx, req)
}

// GetMetric calls api.ViewerService.GetMetric.
func (c *viewerServiceClient) GetMetric(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c.getMetric.CallUnary(ctx, req)
}

// GetBestBlock calls api.ViewerService.GetBestBlock.
func (c *viewerServiceClient) GetBestBlock(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c.getBestBlock.CallUnary(ctx, req)
}

// GetBlock calls api.ViewerService.GetBlock.
func (c *viewerServiceClient) GetBlock(ctx context.Context, req *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Block], error) {
	return c.getBlock.CallUnary(ctx, req)
}

// GetBlockList calls api.ViewerService.GetBlockList.
func (c *viewerServiceClient) GetBlockList(ctx context.Context, req *connect_go.Request[types.ListParams]) (*connect_go.Response[types.BlockHeaderList], error) {
	return c.getBlockList.CallUnary(ctx, req)
}

// GetBlockStream calls api.ViewerService.GetBlockStream.
func (c *viewerServiceClient) GetBlockStream(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c.getBlockStream.CallUnary(ctx, req)
}

// GetTx calls api.ViewerService.GetTx.
func (c *viewerServiceClient) GetTx(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Tx], error) {
	return c.getTx.CallUnary(ctx, req)
}

// GetTxInBlock calls api.ViewerService.GetTxInBlock.
func (c *viewerServiceClient) GetTxInBlock(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.TxInBlock], error) {
	return c.getTxInBlock.CallUnary(ctx, req)
}

// GetReceipt calls api.ViewerService.GetReceipt.
func (c *viewerServiceClient) GetReceipt(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Receipt], error) {
	return c.getReceipt.CallUnary(ctx, req)
}

// GetReceiptInBlock calls api.ViewerService.GetReceiptInBlock.
func (c *viewerServiceClient) GetReceiptInBlock(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c.getReceiptInBlock.CallUnary(ctx, req)
}

// GetEventList calls api.ViewerService.GetEventList.
func (c *viewerServiceClient) GetEventList(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.EventList], error) {
	return c.getEventList.CallUnary(ctx, req)
}

// GetEventStream calls api.ViewerService.GetEventStream.
func (c *viewerServiceClient) GetEventStream(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c.getEventStream.CallUnary(ctx, req)
}

// GetContract calls api.ViewerService.GetContract.
func (c *viewerServiceClient) GetContract(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c.getContract.CallUnary(ctx, req)
}

// QueryContract calls api.ViewerService.QueryContract.
func (c *viewerServiceClient) QueryContract(ctx context.Context, req *connect_go.Request[types.Query]) (*connect_go.Response[types.SingleBytes], error) {
	return c.queryContract.CallUnary(ctx, req)
}

// GetAccount calls api.ViewerService.GetAccount.
func (c *viewerServiceClient) GetAccount(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Account], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// GetName calls api.ViewerService.GetName.
func (c *viewerServiceClient) GetName(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c.getName.CallUnary(ctx, req)
}

// GetToken calls api.ViewerService.GetToken.
func (c *viewerServiceClient) GetToken(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c.getToken.CallUnary(ctx, req)
}

// GetNFT calls api.ViewerService.GetNFT.
func (c *viewerServiceClient) GetNFT(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c.getNFT.CallUnary(ctx, req)
}

// ViewerServiceHandler is an implementation of the api.ViewerService service.
type ViewerServiceHandler interface {
	// server status
	Ping(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	GetChainInfo(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.ChainInfo], error)
	GetNodeState(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	GetMetric(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	GetBestBlock(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	// block
	GetBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Block], error)
	GetBlockList(context.Context, *connect_go.Request[types.ListParams]) (*connect_go.Response[types.BlockHeaderList], error)
	GetBlockStream(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	// tx
	GetTx(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Tx], error)
	GetTxInBlock(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.TxInBlock], error)
	// receipt
	GetReceipt(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Receipt], error)
	GetReceiptInBlock(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	// event
	GetEventList(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.EventList], error)
	GetEventStream(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	// contract
	GetContract(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	QueryContract(context.Context, *connect_go.Request[types.Query]) (*connect_go.Response[types.SingleBytes], error)
	// account
	GetAccount(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Account], error)
	GetName(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	// token
	GetToken(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	// nft
	GetNFT(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
}

// NewViewerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewViewerServiceHandler(svc ViewerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/api.ViewerService/Ping", connect_go.NewUnaryHandler(
		"/api.ViewerService/Ping",
		svc.Ping,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetChainInfo", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetChainInfo",
		svc.GetChainInfo,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetNodeState", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetNodeState",
		svc.GetNodeState,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetMetric", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetMetric",
		svc.GetMetric,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetBestBlock", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetBestBlock",
		svc.GetBestBlock,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetBlock", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetBlock",
		svc.GetBlock,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetBlockList", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetBlockList",
		svc.GetBlockList,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetBlockStream", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetBlockStream",
		svc.GetBlockStream,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetTx", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetTx",
		svc.GetTx,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetTxInBlock", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetTxInBlock",
		svc.GetTxInBlock,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetReceipt", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetReceipt",
		svc.GetReceipt,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetReceiptInBlock", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetReceiptInBlock",
		svc.GetReceiptInBlock,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetEventList", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetEventList",
		svc.GetEventList,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetEventStream", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetEventStream",
		svc.GetEventStream,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetContract", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetContract",
		svc.GetContract,
		opts...,
	))
	mux.Handle("/api.ViewerService/QueryContract", connect_go.NewUnaryHandler(
		"/api.ViewerService/QueryContract",
		svc.QueryContract,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetAccount", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetAccount",
		svc.GetAccount,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetName", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetName",
		svc.GetName,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetToken", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetToken",
		svc.GetToken,
		opts...,
	))
	mux.Handle("/api.ViewerService/GetNFT", connect_go.NewUnaryHandler(
		"/api.ViewerService/GetNFT",
		svc.GetNFT,
		opts...,
	))
	return "/api.ViewerService/", mux
}

// UnimplementedViewerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedViewerServiceHandler struct{}

func (UnimplementedViewerServiceHandler) Ping(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.Ping is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetChainInfo(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.ChainInfo], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetChainInfo is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetNodeState(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetNodeState is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetMetric(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetMetric is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetBestBlock(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetBestBlock is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetBlock(context.Context, *connect_go.Request[types.SingleBytes]) (*connect_go.Response[types.Block], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetBlock is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetBlockList(context.Context, *connect_go.Request[types.ListParams]) (*connect_go.Response[types.BlockHeaderList], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetBlockList is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetBlockStream(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetBlockStream is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetTx(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Tx], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetTx is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetTxInBlock(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.TxInBlock], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetTxInBlock is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetReceipt(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Receipt], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetReceipt is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetReceiptInBlock(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetReceiptInBlock is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetEventList(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.EventList], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetEventList is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetEventStream(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetEventStream is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetContract(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetContract is not implemented"))
}

func (UnimplementedViewerServiceHandler) QueryContract(context.Context, *connect_go.Request[types.Query]) (*connect_go.Response[types.SingleBytes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.QueryContract is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetAccount(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Account], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetAccount is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetName(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetName is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetToken(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetToken is not implemented"))
}

func (UnimplementedViewerServiceHandler) GetNFT(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ViewerService.GetNFT is not implemented"))
}
